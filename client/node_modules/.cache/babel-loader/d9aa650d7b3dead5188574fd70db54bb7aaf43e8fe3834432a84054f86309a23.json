{"ast":null,"code":"import axios from 'axios';\nimport authService from './authService';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(config => {\n  const token = authService.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nclass VocabularyService {\n  // Get vocabulary with filters\n  async getVocabulary(filters = {}) {\n    try {\n      const params = new URLSearchParams();\n      if (filters.language) params.append('language', filters.language);\n      if (filters.level) params.append('level', filters.level);\n      if (filters.category) params.append('category', filters.category);\n      if (filters.page) params.append('page', filters.page);\n      if (filters.limit) params.append('limit', filters.limit);\n      const response = await api.get(`/vocabulary?${params.toString()}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get vocabulary error:', error);\n      throw error;\n    }\n  }\n\n  // Add vocabulary word\n  async addVocabulary(wordData) {\n    try {\n      const response = await api.post('/vocabulary', wordData);\n      return response.data;\n    } catch (error) {\n      console.error('Add vocabulary error:', error);\n      throw error;\n    }\n  }\n\n  // Update vocabulary progress\n  async updateProgress(wordId, isCorrect, difficulty = null) {\n    try {\n      const response = await api.put(`/vocabulary/${wordId}/progress`, {\n        isCorrect,\n        difficulty\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Update vocabulary progress error:', error);\n      throw error;\n    }\n  }\n\n  // Get spaced repetition vocabulary\n  async getSpacedRepetition(limit = 20) {\n    try {\n      const response = await api.get(`/vocabulary/spaced-repetition?limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get spaced repetition vocabulary error:', error);\n      throw error;\n    }\n  }\n\n  // Search vocabulary\n  async searchVocabulary(query) {\n    try {\n      const response = await api.get(`/vocabulary/search?q=${encodeURIComponent(query)}`);\n      return response.data;\n    } catch (error) {\n      console.error('Search vocabulary error:', error);\n      throw error;\n    }\n  }\n\n  // Get vocabulary by category\n  async getVocabularyByCategory(category) {\n    try {\n      const response = await api.get(`/vocabulary/category/${category}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get vocabulary by category error:', error);\n      throw error;\n    }\n  }\n\n  // Delete vocabulary word\n  async deleteVocabulary(wordId) {\n    try {\n      const response = await api.delete(`/vocabulary/${wordId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Delete vocabulary error:', error);\n      throw error;\n    }\n  }\n\n  // Update vocabulary word\n  async updateVocabulary(wordId, wordData) {\n    try {\n      const response = await api.put(`/vocabulary/${wordId}`, wordData);\n      return response.data;\n    } catch (error) {\n      console.error('Update vocabulary error:', error);\n      throw error;\n    }\n  }\n\n  // Get vocabulary stats\n  async getVocabularyStats() {\n    try {\n      const response = await api.get('/vocabulary/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Get vocabulary stats error:', error);\n      throw error;\n    }\n  }\n}\nconst vocabularyService = new VocabularyService();\nexport default vocabularyService;","map":{"version":3,"names":["axios","authService","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","getToken","Authorization","VocabularyService","getVocabulary","filters","params","URLSearchParams","language","append","level","category","page","limit","response","get","toString","data","error","console","addVocabulary","wordData","post","updateProgress","wordId","isCorrect","difficulty","put","getSpacedRepetition","searchVocabulary","query","encodeURIComponent","getVocabularyByCategory","deleteVocabulary","delete","updateVocabulary","getVocabularyStats","vocabularyService"],"sources":["C:/language-learning-app/client/src/services/vocabularyService.js"],"sourcesContent":["import axios from 'axios';\r\nimport authService from './authService';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\napi.interceptors.request.use((config) => {\r\n  const token = authService.getToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nclass VocabularyService {\r\n  // Get vocabulary with filters\r\n  async getVocabulary(filters = {}) {\r\n    try {\r\n      const params = new URLSearchParams();\r\n      \r\n      if (filters.language) params.append('language', filters.language);\r\n      if (filters.level) params.append('level', filters.level);\r\n      if (filters.category) params.append('category', filters.category);\r\n      if (filters.page) params.append('page', filters.page);\r\n      if (filters.limit) params.append('limit', filters.limit);\r\n      \r\n      const response = await api.get(`/vocabulary?${params.toString()}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get vocabulary error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Add vocabulary word\r\n  async addVocabulary(wordData) {\r\n    try {\r\n      const response = await api.post('/vocabulary', wordData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Add vocabulary error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update vocabulary progress\r\n  async updateProgress(wordId, isCorrect, difficulty = null) {\r\n    try {\r\n      const response = await api.put(`/vocabulary/${wordId}/progress`, {\r\n        isCorrect,\r\n        difficulty\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Update vocabulary progress error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get spaced repetition vocabulary\r\n  async getSpacedRepetition(limit = 20) {\r\n    try {\r\n      const response = await api.get(`/vocabulary/spaced-repetition?limit=${limit}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get spaced repetition vocabulary error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Search vocabulary\r\n  async searchVocabulary(query) {\r\n    try {\r\n      const response = await api.get(`/vocabulary/search?q=${encodeURIComponent(query)}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Search vocabulary error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get vocabulary by category\r\n  async getVocabularyByCategory(category) {\r\n    try {\r\n      const response = await api.get(`/vocabulary/category/${category}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get vocabulary by category error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete vocabulary word\r\n  async deleteVocabulary(wordId) {\r\n    try {\r\n      const response = await api.delete(`/vocabulary/${wordId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Delete vocabulary error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update vocabulary word\r\n  async updateVocabulary(wordId, wordData) {\r\n    try {\r\n      const response = await api.put(`/vocabulary/${wordId}`, wordData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Update vocabulary error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get vocabulary stats\r\n  async getVocabularyStats() {\r\n    try {\r\n      const response = await api.get('/vocabulary/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get vocabulary stats error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nconst vocabularyService = new VocabularyService();\r\nexport default vocabularyService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}