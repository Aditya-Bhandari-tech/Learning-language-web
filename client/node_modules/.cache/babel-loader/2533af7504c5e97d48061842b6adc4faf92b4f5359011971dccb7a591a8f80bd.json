{"ast":null,"code":"import axios from 'axios';\n\n// Create axios instance with base configuration\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle token expiration\napi.interceptors.response.use(response => {\n  return response;\n}, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // Token expired or invalid\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\nclass AuthService {\n  // Get token from localStorage\n  getToken() {\n    return localStorage.getItem('token');\n  }\n\n  // Set token in localStorage\n  setToken(token) {\n    localStorage.setItem('token', token);\n  }\n\n  // Remove token from localStorage\n  removeToken() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  }\n\n  // Get user data from localStorage\n  getUser() {\n    const userData = localStorage.getItem('user');\n    return userData ? JSON.parse(userData) : null;\n  }\n\n  // Set user data in localStorage\n  setUser(user) {\n    localStorage.setItem('user', JSON.stringify(user));\n  }\n\n  // Register new user\n  async register(userData) {\n    try {\n      const response = await api.post('/auth/register', userData);\n      if (response.data.success) {\n        this.setToken(response.data.data.token);\n        this.setUser(response.data.data.user);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Register error:', error);\n      throw error;\n    }\n  }\n\n  // Login user\n  async login(email, password) {\n    try {\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      if (response.data.success) {\n        this.setToken(response.data.token);\n        this.setUser(response.data.user);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      throw error;\n    }\n  }\n\n  // Logout user\n  async logout() {\n    try {\n      await api.post('/auth/logout');\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      this.removeToken();\n    }\n  }\n\n  // Get current user data\n  async getCurrentUser() {\n    try {\n      const response = await api.get('/auth/me');\n      if (response.data.success) {\n        this.setUser(response.data.user);\n        return response.data.user;\n      }\n      throw new Error('Failed to get user data');\n    } catch (error) {\n      console.error('Get current user error:', error);\n      throw error;\n    }\n  }\n\n  // Update user profile\n  async updateProfile(userData) {\n    try {\n      const response = await api.put('/auth/profile', userData);\n      if (response.data.success) {\n        this.setUser(response.data.user);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Update profile error:', error);\n      throw error;\n    }\n  }\n\n  // Change password\n  async changePassword(currentPassword, newPassword) {\n    try {\n      const response = await api.put('/auth/change-password', {\n        currentPassword,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Change password error:', error);\n      throw error;\n    }\n  }\n\n  // Add learning language\n  async addLearningLanguage(language, level = 'beginner') {\n    try {\n      const response = await api.post('/auth/learning-languages', {\n        language,\n        level\n      });\n      if (response.data.success) {\n        this.setUser(response.data.user);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Add learning language error:', error);\n      throw error;\n    }\n  }\n\n  // Remove learning language\n  async removeLearningLanguage(language) {\n    try {\n      const response = await api.delete(`/auth/learning-languages/${language}`);\n      if (response.data.success) {\n        this.setUser(response.data.user);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Remove learning language error:', error);\n      throw error;\n    }\n  }\n\n  // Get user achievements\n  async getAchievements() {\n    try {\n      const response = await api.get('/auth/achievements');\n      return response.data;\n    } catch (error) {\n      console.error('Get achievements error:', error);\n      throw error;\n    }\n  }\n\n  // Get user stats\n  async getStats() {\n    try {\n      const response = await api.get('/auth/stats');\n      return response.data;\n    } catch (error) {\n      console.error('Get stats error:', error);\n      throw error;\n    }\n  }\n\n  // Update user preferences\n  async updatePreferences(preferences) {\n    try {\n      const response = await api.put('/auth/preferences', preferences);\n      if (response.data.success) {\n        this.setUser(response.data.user);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Update preferences error:', error);\n      throw error;\n    }\n  }\n\n  // Refresh token\n  async refreshToken() {\n    try {\n      const response = await api.post('/auth/refresh-token');\n      if (response.data.success) {\n        this.setToken(response.data.token);\n        this.setUser(response.data.user);\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Refresh token error:', error);\n      throw error;\n    }\n  }\n\n  // Delete user account\n  async deleteAccount(password) {\n    try {\n      const response = await api.delete('/auth/account', {\n        data: {\n          password\n        }\n      });\n      if (response.data.success) {\n        this.removeToken();\n      }\n      return response.data;\n    } catch (error) {\n      console.error('Delete account error:', error);\n      throw error;\n    }\n  }\n\n  // Check if user is authenticated\n  isAuthenticated() {\n    const token = this.getToken();\n    return !!token;\n  }\n\n  // Get user role (if needed for admin functionality later)\n  getUserRole() {\n    const user = this.getUser();\n    return (user === null || user === void 0 ? void 0 : user.role) || 'user';\n  }\n\n  // Request password reset\n  async requestPasswordReset(email) {\n    try {\n      const response = await api.post('/auth/forgot-password', {\n        email\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Request password reset error:', error);\n      throw error;\n    }\n  }\n\n  // Reset password with token\n  async resetPassword(token, newPassword) {\n    try {\n      const response = await api.post('/auth/reset-password', {\n        token,\n        newPassword\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Reset password error:', error);\n      throw error;\n    }\n  }\n\n  // Verify email\n  async verifyEmail(token) {\n    try {\n      const response = await api.get(`/auth/verify-email/${token}`);\n      return response.data;\n    } catch (error) {\n      console.error('Verify email error:', error);\n      throw error;\n    }\n  }\n\n  // Resend verification email\n  async resendVerificationEmail() {\n    try {\n      const response = await api.post('/auth/resend-verification');\n      return response.data;\n    } catch (error) {\n      console.error('Resend verification email error:', error);\n      throw error;\n    }\n  }\n}\n\n// Create and export instance\nconst authService = new AuthService();\nexport default authService;","map":{"version":3,"names":["axios","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","AuthService","getToken","setToken","setItem","removeToken","getUser","userData","JSON","parse","setUser","user","stringify","register","post","data","success","console","login","email","password","logout","getCurrentUser","get","Error","updateProfile","put","changePassword","currentPassword","newPassword","addLearningLanguage","language","level","removeLearningLanguage","delete","getAchievements","getStats","updatePreferences","preferences","refreshToken","deleteAccount","isAuthenticated","getUserRole","role","requestPasswordReset","resetPassword","verifyEmail","resendVerificationEmail","authService"],"sources":["C:/language-learning-app/client/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Create axios instance with base configuration\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    return config;\r\n  },\r\n  (error) => {\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor to handle token expiration\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    return response;\r\n  },\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      // Token expired or invalid\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\nclass AuthService {\r\n  // Get token from localStorage\r\n  getToken() {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  // Set token in localStorage\r\n  setToken(token) {\r\n    localStorage.setItem('token', token);\r\n  }\r\n\r\n  // Remove token from localStorage\r\n  removeToken() {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n  }\r\n\r\n  // Get user data from localStorage\r\n  getUser() {\r\n    const userData = localStorage.getItem('user');\r\n    return userData ? JSON.parse(userData) : null;\r\n  }\r\n\r\n  // Set user data in localStorage\r\n  setUser(user) {\r\n    localStorage.setItem('user', JSON.stringify(user));\r\n  }\r\n\r\n  // Register new user\r\n  async register(userData) {\r\n    try {\r\n      const response = await api.post('/auth/register', userData);\r\n      \r\n      if (response.data.success) {\r\n        this.setToken(response.data.data.token);\r\n        this.setUser(response.data.data.user);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Register error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Login user\r\n  async login(email, password) {\r\n    try {\r\n      const response = await api.post('/auth/login', { email, password });\r\n      \r\n      if (response.data.success) {\r\n        this.setToken(response.data.token);\r\n        this.setUser(response.data.user);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Logout user\r\n  async logout() {\r\n    try {\r\n      await api.post('/auth/logout');\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n    } finally {\r\n      this.removeToken();\r\n    }\r\n  }\r\n\r\n  // Get current user data\r\n  async getCurrentUser() {\r\n    try {\r\n      const response = await api.get('/auth/me');\r\n      \r\n      if (response.data.success) {\r\n        this.setUser(response.data.user);\r\n        return response.data.user;\r\n      }\r\n      \r\n      throw new Error('Failed to get user data');\r\n    } catch (error) {\r\n      console.error('Get current user error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update user profile\r\n  async updateProfile(userData) {\r\n    try {\r\n      const response = await api.put('/auth/profile', userData);\r\n      \r\n      if (response.data.success) {\r\n        this.setUser(response.data.user);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Update profile error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Change password\r\n  async changePassword(currentPassword, newPassword) {\r\n    try {\r\n      const response = await api.put('/auth/change-password', {\r\n        currentPassword,\r\n        newPassword\r\n      });\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Change password error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Add learning language\r\n  async addLearningLanguage(language, level = 'beginner') {\r\n    try {\r\n      const response = await api.post('/auth/learning-languages', {\r\n        language,\r\n        level\r\n      });\r\n      \r\n      if (response.data.success) {\r\n        this.setUser(response.data.user);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Add learning language error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Remove learning language\r\n  async removeLearningLanguage(language) {\r\n    try {\r\n      const response = await api.delete(`/auth/learning-languages/${language}`);\r\n      \r\n      if (response.data.success) {\r\n        this.setUser(response.data.user);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Remove learning language error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get user achievements\r\n  async getAchievements() {\r\n    try {\r\n      const response = await api.get('/auth/achievements');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get achievements error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get user stats\r\n  async getStats() {\r\n    try {\r\n      const response = await api.get('/auth/stats');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get stats error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update user preferences\r\n  async updatePreferences(preferences) {\r\n    try {\r\n      const response = await api.put('/auth/preferences', preferences);\r\n      \r\n      if (response.data.success) {\r\n        this.setUser(response.data.user);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Update preferences error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Refresh token\r\n  async refreshToken() {\r\n    try {\r\n      const response = await api.post('/auth/refresh-token');\r\n      \r\n      if (response.data.success) {\r\n        this.setToken(response.data.token);\r\n        this.setUser(response.data.user);\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Refresh token error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Delete user account\r\n  async deleteAccount(password) {\r\n    try {\r\n      const response = await api.delete('/auth/account', {\r\n        data: { password }\r\n      });\r\n      \r\n      if (response.data.success) {\r\n        this.removeToken();\r\n      }\r\n      \r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Delete account error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Check if user is authenticated\r\n  isAuthenticated() {\r\n    const token = this.getToken();\r\n    return !!token;\r\n  }\r\n\r\n  // Get user role (if needed for admin functionality later)\r\n  getUserRole() {\r\n    const user = this.getUser();\r\n    return user?.role || 'user';\r\n  }\r\n\r\n  // Request password reset\r\n  async requestPasswordReset(email) {\r\n    try {\r\n      const response = await api.post('/auth/forgot-password', { email });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Request password reset error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Reset password with token\r\n  async resetPassword(token, newPassword) {\r\n    try {\r\n      const response = await api.post('/auth/reset-password', {\r\n        token,\r\n        newPassword\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Reset password error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Verify email\r\n  async verifyEmail(token) {\r\n    try {\r\n      const response = await api.get(`/auth/verify-email/${token}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Verify email error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Resend verification email\r\n  async resendVerificationEmail() {\r\n    try {\r\n      const response = await api.post('/auth/resend-verification');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Resend verification email error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\n// Create and export instance\r\nconst authService = new AuthService();\r\nexport default authService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}