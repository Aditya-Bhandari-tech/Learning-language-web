{"ast":null,"code":"import axios from 'axios';\nimport authService from './authService';\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\napi.interceptors.request.use(config => {\n  const token = authService.getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nclass ProgressService {\n  // Get user progress\n  async getUserProgress() {\n    try {\n      const response = await api.get('/progress');\n      return response.data;\n    } catch (error) {\n      console.error('Get user progress error:', error);\n      throw error;\n    }\n  }\n\n  // Update study time\n  async updateStudyTime(minutes) {\n    try {\n      const response = await api.put('/progress/study-time', {\n        minutes\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Update study time error:', error);\n      throw error;\n    }\n  }\n\n  // Get progress analytics\n  async getProgressAnalytics(timeframe = '30d') {\n    try {\n      const response = await api.get(`/progress/analytics?timeframe=${timeframe}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get progress analytics error:', error);\n      throw error;\n    }\n  }\n\n  // Get leaderboard\n  async getLeaderboard(type = 'weekly', limit = 10) {\n    try {\n      const response = await api.get(`/progress/leaderboard?type=${type}&limit=${limit}`);\n      return response.data;\n    } catch (error) {\n      console.error('Get leaderboard error:', error);\n      throw error;\n    }\n  }\n\n  // Update learning goals\n  async updateLearningGoals(goals) {\n    try {\n      const response = await api.put('/progress/goals', goals);\n      return response.data;\n    } catch (error) {\n      console.error('Update learning goals error:', error);\n      throw error;\n    }\n  }\n\n  // Get achievement progress\n  async getAchievementProgress() {\n    try {\n      const response = await api.get('/progress/achievements');\n      return response.data;\n    } catch (error) {\n      console.error('Get achievement progress error:', error);\n      throw error;\n    }\n  }\n\n  // Get streak information\n  async getStreak() {\n    try {\n      const response = await api.get('/progress/streak');\n      return response.data;\n    } catch (error) {\n      console.error('Get streak error:', error);\n      throw error;\n    }\n  }\n\n  // Update daily activity\n  async updateDailyActivity() {\n    try {\n      const response = await api.post('/progress/daily-activity');\n      return response.data;\n    } catch (error) {\n      console.error('Update daily activity error:', error);\n      throw error;\n    }\n  }\n}\nconst progressService = new ProgressService();\nexport default progressService;","map":{"version":3,"names":["axios","authService","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","getToken","Authorization","ProgressService","getUserProgress","response","get","data","error","console","updateStudyTime","minutes","put","getProgressAnalytics","timeframe","getLeaderboard","type","limit","updateLearningGoals","goals","getAchievementProgress","getStreak","updateDailyActivity","post","progressService"],"sources":["C:/language-learning-app/client/src/services/progressService.js"],"sourcesContent":["import axios from 'axios';\r\nimport authService from './authService';\r\n\r\nconst api = axios.create({\r\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:5000/api',\r\n  timeout: 10000,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\napi.interceptors.request.use((config) => {\r\n  const token = authService.getToken();\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\nclass ProgressService {\r\n  // Get user progress\r\n  async getUserProgress() {\r\n    try {\r\n      const response = await api.get('/progress');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get user progress error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update study time\r\n  async updateStudyTime(minutes) {\r\n    try {\r\n      const response = await api.put('/progress/study-time', { minutes });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Update study time error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get progress analytics\r\n  async getProgressAnalytics(timeframe = '30d') {\r\n    try {\r\n      const response = await api.get(`/progress/analytics?timeframe=${timeframe}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get progress analytics error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get leaderboard\r\n  async getLeaderboard(type = 'weekly', limit = 10) {\r\n    try {\r\n      const response = await api.get(`/progress/leaderboard?type=${type}&limit=${limit}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get leaderboard error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update learning goals\r\n  async updateLearningGoals(goals) {\r\n    try {\r\n      const response = await api.put('/progress/goals', goals);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Update learning goals error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get achievement progress\r\n  async getAchievementProgress() {\r\n    try {\r\n      const response = await api.get('/progress/achievements');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get achievement progress error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get streak information\r\n  async getStreak() {\r\n    try {\r\n      const response = await api.get('/progress/streak');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Get streak error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Update daily activity\r\n  async updateDailyActivity() {\r\n    try {\r\n      const response = await api.post('/progress/daily-activity');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Update daily activity error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nconst progressService = new ProgressService();\r\nexport default progressService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}