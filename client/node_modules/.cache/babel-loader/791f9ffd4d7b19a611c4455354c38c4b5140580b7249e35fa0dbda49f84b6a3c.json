{"ast":null,"code":"var _jsxFileName = \"C:\\\\language-learning-app\\\\client\\\\src\\\\contexts\\\\LearningContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { useAuth } from './AuthContext';\nimport lessonService from '../services/lessonService';\nimport vocabularyService from '../services/vocabularyService';\nimport progressService from '../services/progressService';\n\n// Learning Context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LearningContext = /*#__PURE__*/createContext();\n\n// Learning Actions\nconst LEARNING_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  SET_LESSONS: 'SET_LESSONS',\n  SET_CURRENT_LESSON: 'SET_CURRENT_LESSON',\n  SET_VOCABULARY: 'SET_VOCABULARY',\n  SET_PROGRESS: 'SET_PROGRESS',\n  UPDATE_LESSON_PROGRESS: 'UPDATE_LESSON_PROGRESS',\n  ADD_VOCABULARY: 'ADD_VOCABULARY',\n  UPDATE_VOCABULARY: 'UPDATE_VOCABULARY',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR'\n};\n\n// Learning Reducer\nconst learningReducer = (state, action) => {\n  switch (action.type) {\n    case LEARNING_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        loading: {\n          ...state.loading,\n          [action.key]: action.payload\n        }\n      };\n    case LEARNING_ACTIONS.SET_LESSONS:\n      return {\n        ...state,\n        lessons: action.payload,\n        loading: {\n          ...state.loading,\n          lessons: false\n        }\n      };\n    case LEARNING_ACTIONS.SET_CURRENT_LESSON:\n      return {\n        ...state,\n        currentLesson: action.payload,\n        loading: {\n          ...state.loading,\n          currentLesson: false\n        }\n      };\n    case LEARNING_ACTIONS.SET_VOCABULARY:\n      return {\n        ...state,\n        vocabulary: action.payload,\n        loading: {\n          ...state.loading,\n          vocabulary: false\n        }\n      };\n    case LEARNING_ACTIONS.SET_PROGRESS:\n      return {\n        ...state,\n        progress: action.payload,\n        loading: {\n          ...state.loading,\n          progress: false\n        }\n      };\n    case LEARNING_ACTIONS.UPDATE_LESSON_PROGRESS:\n      return {\n        ...state,\n        progress: {\n          ...state.progress,\n          lessonProgress: state.progress.lessonProgress.map(lp => lp.lessonId === action.payload.lessonId ? {\n            ...lp,\n            ...action.payload\n          } : lp)\n        }\n      };\n    case LEARNING_ACTIONS.ADD_VOCABULARY:\n      return {\n        ...state,\n        vocabulary: [...state.vocabulary, action.payload]\n      };\n    case LEARNING_ACTIONS.UPDATE_VOCABULARY:\n      return {\n        ...state,\n        vocabulary: state.vocabulary.map(word => word._id === action.payload._id ? {\n          ...word,\n          ...action.payload\n        } : word)\n      };\n    case LEARNING_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        loading: {\n          ...state.loading,\n          [action.key]: false\n        }\n      };\n    case LEARNING_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    default:\n      return state;\n  }\n};\n\n// Initial State\nconst initialState = {\n  lessons: [],\n  currentLesson: null,\n  vocabulary: [],\n  progress: null,\n  loading: {\n    lessons: false,\n    currentLesson: false,\n    vocabulary: false,\n    progress: false\n  },\n  error: null\n};\n\n// Learning Provider Component\nexport const LearningProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(learningReducer, initialState);\n  const {\n    user\n  } = useAuth();\n\n  // Load user progress when user changes\n  useEffect(() => {\n    if (user) {\n      loadProgress();\n    }\n  }, [user]);\n\n  // Fetch lessons\n  const fetchLessons = async (filters = {}) => {\n    try {\n      dispatch({\n        type: LEARNING_ACTIONS.SET_LOADING,\n        key: 'lessons',\n        payload: true\n      });\n      dispatch({\n        type: LEARNING_ACTIONS.CLEAR_ERROR\n      });\n      const response = await lessonService.getLessons(filters);\n      if (response.success) {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_LESSONS,\n          payload: response.lessons\n        });\n        return {\n          success: true,\n          lessons: response.lessons\n        };\n      } else {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_ERROR,\n          key: 'lessons',\n          payload: response.message\n        });\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Failed to fetch lessons';\n      dispatch({\n        type: LEARNING_ACTIONS.SET_ERROR,\n        key: 'lessons',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // Fetch lesson by ID\n  const fetchLessonById = async lessonId => {\n    try {\n      dispatch({\n        type: LEARNING_ACTIONS.SET_LOADING,\n        key: 'currentLesson',\n        payload: true\n      });\n      dispatch({\n        type: LEARNING_ACTIONS.CLEAR_ERROR\n      });\n      const response = await lessonService.getLessonById(lessonId);\n      if (response.success) {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_CURRENT_LESSON,\n          payload: response.lesson\n        });\n        return {\n          success: true,\n          lesson: response.lesson\n        };\n      } else {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_ERROR,\n          key: 'currentLesson',\n          payload: response.message\n        });\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message) || 'Failed to fetch lesson';\n      dispatch({\n        type: LEARNING_ACTIONS.SET_ERROR,\n        key: 'currentLesson',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // Start lesson\n  const startLesson = async lessonId => {\n    try {\n      dispatch({\n        type: LEARNING_ACTIONS.CLEAR_ERROR\n      });\n      const response = await lessonService.startLesson(lessonId);\n      if (response.success) {\n        dispatch({\n          type: LEARNING_ACTIONS.UPDATE_LESSON_PROGRESS,\n          payload: response.progress\n        });\n        return {\n          success: true\n        };\n      } else {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_ERROR,\n          key: 'lessons',\n          payload: response.message\n        });\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      const errorMessage = ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.message) || 'Failed to start lesson';\n      dispatch({\n        type: LEARNING_ACTIONS.SET_ERROR,\n        key: 'lessons',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // Complete lesson\n  const completeLesson = async (lessonId, score = 0) => {\n    try {\n      dispatch({\n        type: LEARNING_ACTIONS.CLEAR_ERROR\n      });\n      const response = await lessonService.completeLesson(lessonId, score);\n      if (response.success) {\n        dispatch({\n          type: LEARNING_ACTIONS.UPDATE_LESSON_PROGRESS,\n          payload: response.progress\n        });\n        // Also update overall progress\n        loadProgress();\n        return {\n          success: true\n        };\n      } else {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_ERROR,\n          key: 'lessons',\n          payload: response.message\n        });\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      const errorMessage = ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.message) || 'Failed to complete lesson';\n      dispatch({\n        type: LEARNING_ACTIONS.SET_ERROR,\n        key: 'lessons',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // Fetch vocabulary\n  const fetchVocabulary = async (filters = {}) => {\n    try {\n      dispatch({\n        type: LEARNING_ACTIONS.SET_LOADING,\n        key: 'vocabulary',\n        payload: true\n      });\n      dispatch({\n        type: LEARNING_ACTIONS.CLEAR_ERROR\n      });\n      const response = await vocabularyService.getVocabulary(filters);\n      if (response.success) {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_VOCABULARY,\n          payload: response.vocabulary\n        });\n        return {\n          success: true,\n          vocabulary: response.vocabulary\n        };\n      } else {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_ERROR,\n          key: 'vocabulary',\n          payload: response.message\n        });\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      const errorMessage = ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.message) || 'Failed to fetch vocabulary';\n      dispatch({\n        type: LEARNING_ACTIONS.SET_ERROR,\n        key: 'vocabulary',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // Add vocabulary word\n  const addVocabulary = async wordData => {\n    try {\n      dispatch({\n        type: LEARNING_ACTIONS.CLEAR_ERROR\n      });\n      const response = await vocabularyService.addVocabulary(wordData);\n      if (response.success) {\n        dispatch({\n          type: LEARNING_ACTIONS.ADD_VOCABULARY,\n          payload: response.vocabulary\n        });\n        return {\n          success: true\n        };\n      } else {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_ERROR,\n          key: 'vocabulary',\n          payload: response.message\n        });\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      const errorMessage = ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.message) || 'Failed to add vocabulary';\n      dispatch({\n        type: LEARNING_ACTIONS.SET_ERROR,\n        key: 'vocabulary',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // Update vocabulary progress\n  const updateVocabularyProgress = async (wordId, isCorrect, difficulty = null) => {\n    try {\n      dispatch({\n        type: LEARNING_ACTIONS.CLEAR_ERROR\n      });\n      const response = await vocabularyService.updateProgress(wordId, isCorrect, difficulty);\n      if (response.success) {\n        dispatch({\n          type: LEARNING_ACTIONS.UPDATE_VOCABULARY,\n          payload: response.vocabulary\n        });\n        return {\n          success: true\n        };\n      } else {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_ERROR,\n          key: 'vocabulary',\n          payload: response.message\n        });\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      const errorMessage = ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.message) || 'Failed to update vocabulary progress';\n      dispatch({\n        type: LEARNING_ACTIONS.SET_ERROR,\n        key: 'vocabulary',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // Load user progress\n  const loadProgress = async () => {\n    try {\n      dispatch({\n        type: LEARNING_ACTIONS.SET_LOADING,\n        key: 'progress',\n        payload: true\n      });\n      dispatch({\n        type: LEARNING_ACTIONS.CLEAR_ERROR\n      });\n      const response = await progressService.getUserProgress();\n      if (response.success) {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_PROGRESS,\n          payload: response.progress\n        });\n        return {\n          success: true,\n          progress: response.progress\n        };\n      } else {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_ERROR,\n          key: 'progress',\n          payload: response.message\n        });\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      const errorMessage = ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.message) || 'Failed to load progress';\n      dispatch({\n        type: LEARNING_ACTIONS.SET_ERROR,\n        key: 'progress',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // Update study time\n  const updateStudyTime = async minutes => {\n    try {\n      const response = await progressService.updateStudyTime(minutes);\n      if (response.success) {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_PROGRESS,\n          payload: response.progress\n        });\n        return {\n          success: true\n        };\n      }\n    } catch (error) {\n      console.error('Failed to update study time:', error);\n    }\n  };\n\n  // Search lessons\n  const searchLessons = async query => {\n    try {\n      dispatch({\n        type: LEARNING_ACTIONS.SET_LOADING,\n        key: 'lessons',\n        payload: true\n      });\n      dispatch({\n        type: LEARNING_ACTIONS.CLEAR_ERROR\n      });\n      const response = await lessonService.searchLessons(query);\n      if (response.success) {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_LESSONS,\n          payload: response.lessons\n        });\n        return {\n          success: true,\n          lessons: response.lessons\n        };\n      } else {\n        dispatch({\n          type: LEARNING_ACTIONS.SET_ERROR,\n          key: 'lessons',\n          payload: response.message\n        });\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      const errorMessage = ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.message) || 'Failed to search lessons';\n      dispatch({\n        type: LEARNING_ACTIONS.SET_ERROR,\n        key: 'lessons',\n        payload: errorMessage\n      });\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // Get vocabulary for spaced repetition\n  const getSpacedRepetitionVocabulary = async (limit = 20) => {\n    try {\n      const response = await vocabularyService.getSpacedRepetition(limit);\n      if (response.success) {\n        return {\n          success: true,\n          vocabulary: response.vocabulary\n        };\n      } else {\n        return {\n          success: false,\n          message: response.message\n        };\n      }\n    } catch (error) {\n      var _error$response0, _error$response0$data;\n      const errorMessage = ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.message) || 'Failed to get spaced repetition vocabulary';\n      return {\n        success: false,\n        message: errorMessage\n      };\n    }\n  };\n\n  // Clear error\n  const clearError = () => {\n    dispatch({\n      type: LEARNING_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  // Context value\n  const value = {\n    lessons: state.lessons,\n    currentLesson: state.currentLesson,\n    vocabulary: state.vocabulary,\n    progress: state.progress,\n    loading: state.loading,\n    error: state.error,\n    fetchLessons,\n    fetchLessonById,\n    startLesson,\n    completeLesson,\n    fetchVocabulary,\n    addVocabulary,\n    updateVocabularyProgress,\n    loadProgress,\n    updateStudyTime,\n    searchLessons,\n    getSpacedRepetitionVocabulary,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(LearningContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 385,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use learning context\n_s(LearningProvider, \"hSdSjqWJKYfK9eeRrsl94KPEqnE=\", false, function () {\n  return [useAuth];\n});\n_c = LearningProvider;\nexport const useLearning = () => {\n  _s2();\n  const context = useContext(LearningContext);\n  if (!context) {\n    throw new Error('useLearning must be used within a LearningProvider');\n  }\n  return context;\n};\n_s2(useLearning, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default LearningContext;\nvar _c;\n$RefreshReg$(_c, \"LearningProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","useAuth","lessonService","vocabularyService","progressService","jsxDEV","_jsxDEV","LearningContext","LEARNING_ACTIONS","SET_LOADING","SET_LESSONS","SET_CURRENT_LESSON","SET_VOCABULARY","SET_PROGRESS","UPDATE_LESSON_PROGRESS","ADD_VOCABULARY","UPDATE_VOCABULARY","SET_ERROR","CLEAR_ERROR","learningReducer","state","action","type","loading","key","payload","lessons","currentLesson","vocabulary","progress","lessonProgress","map","lp","lessonId","word","_id","error","initialState","LearningProvider","children","_s","dispatch","user","loadProgress","fetchLessons","filters","response","getLessons","success","message","_error$response","_error$response$data","errorMessage","data","fetchLessonById","getLessonById","lesson","_error$response2","_error$response2$data","startLesson","_error$response3","_error$response3$data","completeLesson","score","_error$response4","_error$response4$data","fetchVocabulary","getVocabulary","_error$response5","_error$response5$data","addVocabulary","wordData","_error$response6","_error$response6$data","updateVocabularyProgress","wordId","isCorrect","difficulty","updateProgress","_error$response7","_error$response7$data","getUserProgress","_error$response8","_error$response8$data","updateStudyTime","minutes","console","searchLessons","query","_error$response9","_error$response9$data","getSpacedRepetitionVocabulary","limit","getSpacedRepetition","_error$response0","_error$response0$data","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useLearning","_s2","context","Error","$RefreshReg$"],"sources":["C:/language-learning-app/client/src/contexts/LearningContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react';\r\nimport { useAuth } from './AuthContext';\r\nimport lessonService from '../services/lessonService';\r\nimport vocabularyService from '../services/vocabularyService';\r\nimport progressService from '../services/progressService';\r\n\r\n// Learning Context\r\nconst LearningContext = createContext();\r\n\r\n// Learning Actions\r\nconst LEARNING_ACTIONS = {\r\n  SET_LOADING: 'SET_LOADING',\r\n  SET_LESSONS: 'SET_LESSONS',\r\n  SET_CURRENT_LESSON: 'SET_CURRENT_LESSON',\r\n  SET_VOCABULARY: 'SET_VOCABULARY',\r\n  SET_PROGRESS: 'SET_PROGRESS',\r\n  UPDATE_LESSON_PROGRESS: 'UPDATE_LESSON_PROGRESS',\r\n  ADD_VOCABULARY: 'ADD_VOCABULARY',\r\n  UPDATE_VOCABULARY: 'UPDATE_VOCABULARY',\r\n  SET_ERROR: 'SET_ERROR',\r\n  CLEAR_ERROR: 'CLEAR_ERROR'\r\n};\r\n\r\n// Learning Reducer\r\nconst learningReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case LEARNING_ACTIONS.SET_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: { ...state.loading, [action.key]: action.payload }\r\n      };\r\n\r\n    case LEARNING_ACTIONS.SET_LESSONS:\r\n      return {\r\n        ...state,\r\n        lessons: action.payload,\r\n        loading: { ...state.loading, lessons: false }\r\n      };\r\n\r\n    case LEARNING_ACTIONS.SET_CURRENT_LESSON:\r\n      return {\r\n        ...state,\r\n        currentLesson: action.payload,\r\n        loading: { ...state.loading, currentLesson: false }\r\n      };\r\n\r\n    case LEARNING_ACTIONS.SET_VOCABULARY:\r\n      return {\r\n        ...state,\r\n        vocabulary: action.payload,\r\n        loading: { ...state.loading, vocabulary: false }\r\n      };\r\n\r\n    case LEARNING_ACTIONS.SET_PROGRESS:\r\n      return {\r\n        ...state,\r\n        progress: action.payload,\r\n        loading: { ...state.loading, progress: false }\r\n      };\r\n\r\n    case LEARNING_ACTIONS.UPDATE_LESSON_PROGRESS:\r\n      return {\r\n        ...state,\r\n        progress: {\r\n          ...state.progress,\r\n          lessonProgress: state.progress.lessonProgress.map(lp =>\r\n            lp.lessonId === action.payload.lessonId ? { ...lp, ...action.payload } : lp\r\n          )\r\n        }\r\n      };\r\n\r\n    case LEARNING_ACTIONS.ADD_VOCABULARY:\r\n      return {\r\n        ...state,\r\n        vocabulary: [...state.vocabulary, action.payload]\r\n      };\r\n\r\n    case LEARNING_ACTIONS.UPDATE_VOCABULARY:\r\n      return {\r\n        ...state,\r\n        vocabulary: state.vocabulary.map(word =>\r\n          word._id === action.payload._id ? { ...word, ...action.payload } : word\r\n        )\r\n      };\r\n\r\n    case LEARNING_ACTIONS.SET_ERROR:\r\n      return {\r\n        ...state,\r\n        error: action.payload,\r\n        loading: { ...state.loading, [action.key]: false }\r\n      };\r\n\r\n    case LEARNING_ACTIONS.CLEAR_ERROR:\r\n      return {\r\n        ...state,\r\n        error: null\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// Initial State\r\nconst initialState = {\r\n  lessons: [],\r\n  currentLesson: null,\r\n  vocabulary: [],\r\n  progress: null,\r\n  loading: {\r\n    lessons: false,\r\n    currentLesson: false,\r\n    vocabulary: false,\r\n    progress: false\r\n  },\r\n  error: null\r\n};\r\n\r\n// Learning Provider Component\r\nexport const LearningProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(learningReducer, initialState);\r\n  const { user } = useAuth();\r\n\r\n  // Load user progress when user changes\r\n  useEffect(() => {\r\n    if (user) {\r\n      loadProgress();\r\n    }\r\n  }, [user]);\r\n\r\n  // Fetch lessons\r\n  const fetchLessons = async (filters = {}) => {\r\n    try {\r\n      dispatch({ type: LEARNING_ACTIONS.SET_LOADING, key: 'lessons', payload: true });\r\n      dispatch({ type: LEARNING_ACTIONS.CLEAR_ERROR });\r\n\r\n      const response = await lessonService.getLessons(filters);\r\n      \r\n      if (response.success) {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_LESSONS, payload: response.lessons });\r\n        return { success: true, lessons: response.lessons };\r\n      } else {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'lessons', payload: response.message });\r\n        return { success: false, message: response.message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to fetch lessons';\r\n      dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'lessons', payload: errorMessage });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Fetch lesson by ID\r\n  const fetchLessonById = async (lessonId) => {\r\n    try {\r\n      dispatch({ type: LEARNING_ACTIONS.SET_LOADING, key: 'currentLesson', payload: true });\r\n      dispatch({ type: LEARNING_ACTIONS.CLEAR_ERROR });\r\n\r\n      const response = await lessonService.getLessonById(lessonId);\r\n      \r\n      if (response.success) {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_CURRENT_LESSON, payload: response.lesson });\r\n        return { success: true, lesson: response.lesson };\r\n      } else {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'currentLesson', payload: response.message });\r\n        return { success: false, message: response.message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to fetch lesson';\r\n      dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'currentLesson', payload: errorMessage });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Start lesson\r\n  const startLesson = async (lessonId) => {\r\n    try {\r\n      dispatch({ type: LEARNING_ACTIONS.CLEAR_ERROR });\r\n\r\n      const response = await lessonService.startLesson(lessonId);\r\n      \r\n      if (response.success) {\r\n        dispatch({ type: LEARNING_ACTIONS.UPDATE_LESSON_PROGRESS, payload: response.progress });\r\n        return { success: true };\r\n      } else {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'lessons', payload: response.message });\r\n        return { success: false, message: response.message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to start lesson';\r\n      dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'lessons', payload: errorMessage });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Complete lesson\r\n  const completeLesson = async (lessonId, score = 0) => {\r\n    try {\r\n      dispatch({ type: LEARNING_ACTIONS.CLEAR_ERROR });\r\n\r\n      const response = await lessonService.completeLesson(lessonId, score);\r\n      \r\n      if (response.success) {\r\n        dispatch({ type: LEARNING_ACTIONS.UPDATE_LESSON_PROGRESS, payload: response.progress });\r\n        // Also update overall progress\r\n        loadProgress();\r\n        return { success: true };\r\n      } else {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'lessons', payload: response.message });\r\n        return { success: false, message: response.message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to complete lesson';\r\n      dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'lessons', payload: errorMessage });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Fetch vocabulary\r\n  const fetchVocabulary = async (filters = {}) => {\r\n    try {\r\n      dispatch({ type: LEARNING_ACTIONS.SET_LOADING, key: 'vocabulary', payload: true });\r\n      dispatch({ type: LEARNING_ACTIONS.CLEAR_ERROR });\r\n\r\n      const response = await vocabularyService.getVocabulary(filters);\r\n      \r\n      if (response.success) {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_VOCABULARY, payload: response.vocabulary });\r\n        return { success: true, vocabulary: response.vocabulary };\r\n      } else {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'vocabulary', payload: response.message });\r\n        return { success: false, message: response.message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to fetch vocabulary';\r\n      dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'vocabulary', payload: errorMessage });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Add vocabulary word\r\n  const addVocabulary = async (wordData) => {\r\n    try {\r\n      dispatch({ type: LEARNING_ACTIONS.CLEAR_ERROR });\r\n\r\n      const response = await vocabularyService.addVocabulary(wordData);\r\n      \r\n      if (response.success) {\r\n        dispatch({ type: LEARNING_ACTIONS.ADD_VOCABULARY, payload: response.vocabulary });\r\n        return { success: true };\r\n      } else {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'vocabulary', payload: response.message });\r\n        return { success: false, message: response.message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to add vocabulary';\r\n      dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'vocabulary', payload: errorMessage });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Update vocabulary progress\r\n  const updateVocabularyProgress = async (wordId, isCorrect, difficulty = null) => {\r\n    try {\r\n      dispatch({ type: LEARNING_ACTIONS.CLEAR_ERROR });\r\n\r\n      const response = await vocabularyService.updateProgress(wordId, isCorrect, difficulty);\r\n      \r\n      if (response.success) {\r\n        dispatch({ type: LEARNING_ACTIONS.UPDATE_VOCABULARY, payload: response.vocabulary });\r\n        return { success: true };\r\n      } else {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'vocabulary', payload: response.message });\r\n        return { success: false, message: response.message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to update vocabulary progress';\r\n      dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'vocabulary', payload: errorMessage });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Load user progress\r\n  const loadProgress = async () => {\r\n    try {\r\n      dispatch({ type: LEARNING_ACTIONS.SET_LOADING, key: 'progress', payload: true });\r\n      dispatch({ type: LEARNING_ACTIONS.CLEAR_ERROR });\r\n\r\n      const response = await progressService.getUserProgress();\r\n      \r\n      if (response.success) {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_PROGRESS, payload: response.progress });\r\n        return { success: true, progress: response.progress };\r\n      } else {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'progress', payload: response.message });\r\n        return { success: false, message: response.message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to load progress';\r\n      dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'progress', payload: errorMessage });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Update study time\r\n  const updateStudyTime = async (minutes) => {\r\n    try {\r\n      const response = await progressService.updateStudyTime(minutes);\r\n      \r\n      if (response.success) {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_PROGRESS, payload: response.progress });\r\n        return { success: true };\r\n      }\r\n    } catch (error) {\r\n      console.error('Failed to update study time:', error);\r\n    }\r\n  };\r\n\r\n  // Search lessons\r\n  const searchLessons = async (query) => {\r\n    try {\r\n      dispatch({ type: LEARNING_ACTIONS.SET_LOADING, key: 'lessons', payload: true });\r\n      dispatch({ type: LEARNING_ACTIONS.CLEAR_ERROR });\r\n\r\n      const response = await lessonService.searchLessons(query);\r\n      \r\n      if (response.success) {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_LESSONS, payload: response.lessons });\r\n        return { success: true, lessons: response.lessons };\r\n      } else {\r\n        dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'lessons', payload: response.message });\r\n        return { success: false, message: response.message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to search lessons';\r\n      dispatch({ type: LEARNING_ACTIONS.SET_ERROR, key: 'lessons', payload: errorMessage });\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Get vocabulary for spaced repetition\r\n  const getSpacedRepetitionVocabulary = async (limit = 20) => {\r\n    try {\r\n      const response = await vocabularyService.getSpacedRepetition(limit);\r\n      \r\n      if (response.success) {\r\n        return { success: true, vocabulary: response.vocabulary };\r\n      } else {\r\n        return { success: false, message: response.message };\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = error.response?.data?.message || 'Failed to get spaced repetition vocabulary';\r\n      return { success: false, message: errorMessage };\r\n    }\r\n  };\r\n\r\n  // Clear error\r\n  const clearError = () => {\r\n    dispatch({ type: LEARNING_ACTIONS.CLEAR_ERROR });\r\n  };\r\n\r\n  // Context value\r\n  const value = {\r\n    lessons: state.lessons,\r\n    currentLesson: state.currentLesson,\r\n    vocabulary: state.vocabulary,\r\n    progress: state.progress,\r\n    loading: state.loading,\r\n    error: state.error,\r\n    fetchLessons,\r\n    fetchLessonById,\r\n    startLesson,\r\n    completeLesson,\r\n    fetchVocabulary,\r\n    addVocabulary,\r\n    updateVocabularyProgress,\r\n    loadProgress,\r\n    updateStudyTime,\r\n    searchLessons,\r\n    getSpacedRepetitionVocabulary,\r\n    clearError\r\n  };\r\n\r\n  return (\r\n    <LearningContext.Provider value={value}>\r\n      {children}\r\n    </LearningContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use learning context\r\nexport const useLearning = () => {\r\n  const context = useContext(LearningContext);\r\n  \r\n  if (!context) {\r\n    throw new Error('useLearning must be used within a LearningProvider');\r\n  }\r\n  \r\n  return context;\r\n};\r\n\r\nexport default LearningContext;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}